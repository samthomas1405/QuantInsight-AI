version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: quantinsight-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - static-files:/usr/share/nginx/html/static:ro
    depends_on:
      - frontend
      - backend
    networks:
      - quantinsight-network
    restart: always
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (served by nginx in production)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    container_name: quantinsight-frontend-prod
    environment:
      - REACT_APP_API_URL=/api
      - NODE_ENV=production
    volumes:
      - static-files:/usr/share/nginx/html
    networks:
      - quantinsight-network
    restart: always

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: quantinsight-backend-prod
    env_file:
      - .env.production
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - PYTHONUNBUFFERED=1
      - ENVIRONMENT=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - backend-uploads:/app/uploads
      - backend-logs:/app/logs
    networks:
      - quantinsight-network
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: quantinsight-postgres-prod
    env_file:
      - .env.production
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backup:/backup
    networks:
      - quantinsight-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: quantinsight-redis-prod
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - quantinsight-network
    healthcheck:
      test: ["CMD", "redis-cli", "--auth", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: quantinsight-backup
    env_file:
      - .env.production
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./backup:/backup
      - ./scripts:/scripts:ro
    networks:
      - quantinsight-network
    profiles:
      - backup
    command: /scripts/backup.sh

# Production volumes
volumes:
  postgres-data:
    name: quantinsight-postgres-data-prod
  redis-data:
    name: quantinsight-redis-data-prod
  backend-uploads:
    name: quantinsight-backend-uploads-prod
  backend-logs:
    name: quantinsight-backend-logs-prod
  static-files:
    name: quantinsight-static-files-prod

# Production network
networks:
  quantinsight-network:
    name: quantinsight-network-prod
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16